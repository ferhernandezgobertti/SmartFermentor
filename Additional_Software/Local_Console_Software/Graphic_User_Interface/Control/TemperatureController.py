import sys, time, os, serialfrom datetime import date, datetime, timedeltafrom multiprocessing import Process, Arrayimport Control.BathManagementser = serial.Serial()ser.port = '/dev/ttyACM2' #DEFAULTser.baudrate = 9600ser.timeout = 10ser.parity = serial.PARITY_NONEser.stopbits = serial.STOPBITS_ONEser.bytesize = serial.EIGHTBITSser.timeout = 2FMT = '%H:%M:%S.%f'def setControlParameters(temperatureObjectiveList, temperatureStepActual):    constantsParameters = [0, 0, 0] # [WARM INT, COOL INT, CONST DERIV]    currentObjective = temperatureObjectiveList[temperatureStepActual]    if(temperatureStepActual==0):        previousObjective = 20 # Environment    else:        previousObjective = temperatureObjectiveList[temperatureStepActual-1]    objectiveJump = currentObjective - previousObjective    if(objectiveJump>0):        constantsParameters[2] = 8 #CONSTD    else:        constantsParameters[2] = 6 #CONSTD    if(abs(objectiveJump)<10):        constantsParameters[0] = 0.003 #WARM        constantsParameters[1] = 0.0032 #COOL    else:        constantsParameters[0] = 0.0012 #WARM        constantsParameters[1] = 0.001333 #COOL    return constantsParametersdef checkTemperatureObjective(tempFermObj):    tempPos = tempFermObj    if(tempFermObj>50 and tempFermObj<=70):        tempPos = tempFermObj + 1    if(tempFermObj>70 and tempFermObj<=85):        tempPos = tempFermObj + 2    if(tempFermObj>=85 and tempFermObj<=96):        tempPos = tempFermObj + 3    return tempPosdef checkControlParameters(errorActual, warmI, coolI):    if(errorActual<0):        constI = coolI    else:        constI = warmI    return constIdef checkLimits(tempPos):    if(tempPos>95):        tempPos = 95    if(tempPos<3):        tempPos = 3    return tempPosdef changeBehaviourAccordingToSensitivity(temperatureSensitivity, tempPos):    if(temperatureSensitivity==1):        tempPos = 75    if(temperatureSensitivity==2):        tempPos = 90    return tempPosdef saveBathData(dataBath, tempFerm, currentStr, currentFileDay, currentFileTime, dataInterval, intervalCount, tempFermObj, pumpBath):    newTime = datetime.today()    newTimeStr = newTime.strftime(FMT)    FMT = '%H:%M:%S.%f'    tdelta = datetime.strptime(newTimeStr, FMT) - datetime.strptime(currentStr, FMT)        if(tdelta.seconds>=dataInterval*intervalCount):        if(currentFileTime<=99999):            currentFileStr = "0"+str(currentFileTime)        else:            currentFileStr = str(currentFileTime)        fileTime = datetime.today()        filename = "ControlData/Temperature/DATA_Log/"+str(currentFileDay)+"_"+currentFileStr+"_TEM.txt"        intervalCount = intervalCount+1        newTime = datetime.today()        newTimeStr = newTime.strftime(FMT)        tdelta = datetime.strptime(newTimeStr, FMT) - datetime.strptime(currentStr, FMT)        with open(filename, 'a') as registerBathData:            registerBathData.write(str(tempFerm)+','+str(tempFermObj)+','+str(float(dataBath[0]))+','+str(float(dataBath[1]))+','+str(pumpBath)+','+str(tdelta.seconds)+','+str(tdelta.microseconds)+'\n')            registerBathData.close()    return intervalCountdef calculateLRC(input):    lrc = ord(input[0])    for i in range(1,len(input)):        lrc += ord(input[i])    return lrcdef readTemperature(ser, isDataRequested, errorCount):    temperatureRead = ""    val1= ":01DT0190"    res = calculateLRC(val1[1:])    lrcData = hex((((res^0xFF)+1)&0xFF))    dataToSend = val1+str(lrcData[2:4]).upper()+'\r\n'    ser.write(dataToSend.encode('ascii'))    dataReceived = ser.read(17)    if(len(dataReceived)>0):        errorCount[1] = 0        currentTemperature = dataReceived.decode("utf-8")        temperatureRead = currentTemperature[7:13]        isDataRequested = True        lrcReceived = currentTemperature[13:15]        resVerification = calculateLRC(currentTemperature[1:13])        lrcVerification = hex((((resVerification^0xFF)+1)&0xFF))        if(str(lrcVerification[2:4]).upper()!=str(lrcReceived).upper()):            errorCount[0] = errorCount[0] + 1        else:            errorCount[0] = 0    else:        errorCount[1] = errorCount[1] + 1        return [temperatureRead, isDataRequested, errorCount]def isSensorWellConnected(dataConnection):    lrcToVerify = dataConnection[9:11].upper()    res = calculateLRC(dataConnection[1:9])    lrcVerification = hex((((res^0xFF)+1)&0xFF))    return ("OK" in dataConnection) and (lrcVerification == lrcToVerify)def checkConnectionSensor(ser):    sensorConnected = False    val1 = ":01CN01CH"    res = calculateLRC(val1[1:])    lrcData = hex((((res^0xFF)+1)&0xFF))    dataToSend = val1+str(lrcData[2:4]).upper()+'\r\n'    ser.write(dataToSend.encode('ascii'))    dataReceived = ser.read(13)    if (isSensorWellConnected(dataReceived.decode('ascii'))):        sensorConnected = True    return sensorConnecteddef checkConnectionCirculator(bathManager):    bathConnected = False    bathManager[0] = 2    while(bathManager[0]==2):        var = 1 + 1    if(bathManager[7] == 1):        bathConnected = True    return bathConnecteddef configureTemperaturePorts(ser, temperaturePort):    ser.port = '/dev/ttyACM2'    if(temperaturePort==1):        ser.port = '/dev/ttyACM0'    elif(temperaturePort==2):        ser.port = '/dev/ttyACM1'    elif(temperaturePort==3):        ser.port = '/dev/ttyACM2'    elif(temperaturePort==4):        ser.port = '/dev/ttyACM3'    elif(temperaturePort==5):        ser.port = '/dev/ttyUSB0'    elif(temperaturePort==6):        ser.port = '/dev/ttyUSB1'    elif(temperaturePort==7):        ser.port = '/dev/ttyUSB2'    elif(temperaturePort==8):        ser.port = '/dev/ttyUSB3'    elif(temperaturePort==9):        ser.port = '/dev/ttyAMA0'    elif(temperaturePort==10):        ser.port = '/dev/ttyAMA1'def childProcess(manager, temperatureObjective, duration):    isDataRequested = False    bathManager = Array('i', [0] * 13)    dataBath = Array('d', [0.0] * 7)    bathManager[4] = 5    bathManager[10] = manager[22]    configureTemperaturePorts(ser, manager[21])    try:        ser.open()        managementOfBath = Process(target = Control.BathManagement.childProcess, args=(bathManager, dataBath, ))        managementOfBath.start()        temperatureStep = 0        while(manager[0]!=0):                    currentT = datetime.today()            currentStr = currentT.strftime(FMT)            intervalCount = 1            time.sleep(1)            exactT = datetime.today()            exactStr = exactT.strftime(FMT)                    if(manager[0]==2):                temperatureConnection = 100                isSensorConnectionRight = checkConnectionSensor(ser)                isBathConnectionRight = checkConnectionCirculator(bathManager)                if(isSensorConnectionRight):                    temperatureConnection = temperatureConnection + 10                if(isBathConnectionRight):                    temperatureConnection = temperatureConnection + 1                manager[0] = temperatureConnection            if(manager[0]==12):                val1= ":01TS02TM05"                res = calculateLRC(val1[1:])                lrcData = hex((((res^0xFF)+1)&0xFF))                if(len(lrcData)==3):                    lrcData = str(lrcData[0:2]) + "0" + str(lrcData[3:4])                dataToSend = val1+str(lrcData[2:4]).upper()+'\r\n'                ser.write(dataToSend.encode('ascii'))                answerTEMP = ser.read(17)                informationReceived = answerTEMP.decode("utf-8")                if(len(informationReceived)>0 and not "ERROR" in informationReceived):                    manager[11] = int(float(str(informationReceived[7:13]))*100)                answerTEMP = ser.read(17)                informationReceived = answerTEMP.decode("utf-8")                if(len(informationReceived)>0 and not "ERROR" in informationReceived):                    manager[12] = int(float(str(informationReceived[7:13]))*100)                answerTEMP = ser.read(17)                informationReceived = answerTEMP.decode("utf-8")                if(len(informationReceived)>0 and not "ERROR" in informationReceived):                    manager[13] = int(float(str(informationReceived[7:13]))*100)                answerTEMP = ser.read(17)                informationReceived = answerTEMP.decode("utf-8")                if(len(informationReceived)>0 and not "ERROR" in informationReceived):                    manager[14] = int(float(str(informationReceived[7:13]))*100)                answerTEMP = ser.read(17)                informationReceived = answerTEMP.decode("utf-8")                if(len(informationReceived)>0 and not "ERROR" in informationReceived):                    manager[15] = int(float(str(informationReceived[7:13]))*100)                manager[0] = 1            if(manager[0]==13):                val1= ":01VS01TM"                res = calculateLRC(val1[1:])                lrcData = hex((((res^0xFF)+1)&0xFF))                if(len(lrcData)==3):                    lrcData = str(lrcData[0:2]) + "0" + str(lrcData[3:4])                dataToSend = val1+str(lrcData[2:4]).upper()+'\r\n'                ser.write(dataToSend.encode('ascii'))                answerTEMP = ser.read(15)                informationReceived = answerTEMP.decode("utf-8")                if(len(informationReceived)>0 and not "ERROR" in informationReceived):                    manager[16] = int(float(str(informationReceived[7:11]))*100)                manager[0] = 1            while(manager[1]!=0):                            if(manager[2]==3 or manager[2]==4):                                manager[2] = 0                errorCount = [0, 0, 0, 0, 0, 0] # [REDUNDANCIA SENSOR, TIMEOUT SENSOR, FALLOS SENSADO TEMP SENSOR, PROBLEMA POTOCOLO BANO, TIMEOUT BANO, FALLOS SENSADO TEMP BANO]                bathManager[0] = 0                bathManager[9] = 0                tempFermObj = temperatureObjective[temperatureStep]                objectiveTime = duration[temperatureStep]                fileTime = manager[4]                fileDay = manager[5]                controlUnit = manager[6]                controlPrecision = int(manager[7])/10                temperatureSensitivity = manager[8]                dataInterval = manager[9]                pumpStep = manager[10]                controlStopped = False                bathManager[3] = 0                bathManager[4] = pumpStep                timeBetweenSamples = 90                if(tempFermObj<=20):                    timeBetweenSamples = 120                            errorPast = 0                errorInt = 0                errorDev = 0                errorActual = 0                errorActualPast = 0                constants = setControlParameters(temperatureObjective, temperatureStep)                warmI = constants[0]                coolI = constants[1]                constD = constants[2]                constI = 0.1                controlI = 0                controlD = 0                tempPosPast = 0                changeTemp = 0                tempPrevious = 25.00                stepBeginTime = datetime.today()                stepBeginTimeStr = stepBeginTime.strftime(FMT)                currentTime = datetime.today()                currentTimeStr = currentTime.strftime(FMT)                timeDifference = datetime.strptime(currentTimeStr, FMT) - datetime.strptime(stepBeginTimeStr, FMT)                currentDuration = timeDifference.seconds + timeDifference.microseconds*(0.000001)                prevTime = datetime.today()                prevTimeStr = prevTime.strftime(FMT)                sampleTime = datetime.today()                sampleTimeStr = sampleTime.strftime(FMT)                diffTime = datetime.today()                diffTimeStr = diffTime.strftime(FMT)                while(currentDuration<=objectiveTime and manager[2]==0):                    bathManager[0] = 0                    bathManager[9] = 1                    bathManager[0] = 2                    changeTemp = 0                    while(changeTemp==0 and currentDuration<=objectiveTime):                        nowTime = datetime.today()                        nowTimeStr = nowTime.strftime(FMT)                        nowTDelta = datetime.strptime(nowTimeStr, FMT) - datetime.strptime(diffTimeStr, FMT)                        dif = nowTDelta.seconds + nowTDelta.microseconds*(0.000001)                        if(dif>=0):                            diffTime = datetime.today()                            diffTimeStr = diffTime.strftime(FMT)                            try:                                returnedData = readTemperature(ser, isDataRequested, errorCount)                                           tempFerm = float(returnedData[0])                                isDataRequested = returnedData[1]                                errorCount = returnedData[2]                                if(tempFerm<10.00 or tempFerm>98.00 or abs(tempFerm-tempPrevious)>5):                                    errorCount[2] = errorCount[2] + 1                                else:                                    errorCount[2] = 0                                tempPrevious = tempFerm                                if(bathManager[12]>0 or errorCount[0]>5 or errorCount[1]>5 or errorCount[2]>10 or bathManager[11]>0):                                    tempPos = tempFermObj                                    if(bathManager[12]>0):                                        manager[23] = 2                                        manager[2] = 1                                    if(errorCount[0]>5):                                        manager[24] = 2                                    if(errorCount[1]>5):                                        manager[24] = 3                                    if(errorCount[2]>10):                                        manager[24] = 4                                    if(bathManager[11]>0):                                        manager[24] = bathManager[11] + 4                                else:                                    manager[24] = 0                                if(len(str(tempFerm))>0 and isDataRequested):                                    intervalCount = saveBathData(dataBath, tempFerm, exactStr, fileDay, fileTime, dataInterval, intervalCount, tempFermObj, bathManager[4])                                if(manager[20]==1):                                    if(manager[18]==1):                                        manager[18] = 0                                        bathManager[9] = 0                                        time.sleep(2)                                        bathManager[0] = 3                                                                            while(bathManager[0]!=0):                                            vari = 1 + 1                                                                            time.sleep(2)                                        bathManager[3] = manager[17]                                        bathManager[4] = manager[19]                                        time.sleep(2)                                        bathManager[0] = 1                                                                                while(bathManager[0]!=0):                                            vari = 1 + 1                                        time.sleep(2)                                        changeTemp = 1                                                                        if(manager[18]==3):                                        manager[18] = 0                                        bathManager[9] = 0                                        time.sleep(2)                                        bathManager[0] = 3                                        while(bathManager[0]!=0):                                            vari = 1 + 1                                        time.sleep(2)                                        changeTemp = 1                                else:                                                                    bathManager[9] = 1                                    currentTime = datetime.today()                                    currentTimeStr = currentTime.strftime(FMT)                                    currentTDelta = datetime.strptime(currentTimeStr, FMT) - datetime.strptime(prevTimeStr, FMT)                                    period = currentTDelta.seconds + currentTDelta.microseconds*(0.000001)                                    errorActual = tempFermObj-round(float(tempFerm),2)                                    if(abs(errorActual)<3 and abs(errorActual)>=controlPrecision and tempFermObj<=50):                                        errorInt = errorInt + (errorActual+errorPast)*period/2 #INTEGRAL                                        constI = checkControlParameters(errorActual, warmI, coolI)                                        controlI = constI*errorInt                                        errorDev = (errorActual-errorPast)/period                                        controlD = constD*errorDev                                        errorPast = errorActual                                        tempPos = tempFermObj + controlI + controlD                                        tempPos = checkLimits(tempPos)                                    else:                                                                        tempPos = checkTemperatureObjective(tempFermObj)                                        errorInt = 0                                        tempPos = changeBehaviourAccordingToSensitivity(temperatureSensitivity, tempPos)                                    sampleDelta = datetime.strptime(currentTimeStr, FMT) - datetime.strptime(sampleTimeStr, FMT)                                    deltaSample = sampleDelta.seconds + sampleDelta.microseconds*(0.000001)                                    prevTime = datetime.today()                                    prevTimeStr = prevTime.strftime(FMT)                                    if((deltaSample>=timeBetweenSamples and (float(bathManager[3]/100)<=tempPos-0.2 or float(bathManager[3]/100)>=tempPos+0.2)) or bathManager[3]==0):                                        sampleTime = datetime.today()                                        sampleTimeStr = sampleTime.strftime(FMT)                                        diffTime = datetime.today()                                        diffTimeStr = diffTime.strftime(FMT)                                        bathManager[9] = 0                                        time.sleep(2)                                        bathManager[0] = 3                                        while(bathManager[0]!=0):                                           vari = 1 + 1                                        time.sleep(2)                                                                                bathManager[3] = int(round(tempPos,2)*100)                                        time.sleep(2)                                        bathManager[0] = 1                                        while(bathManager[0]!=0):                                            vari = 1 + 1                                        time.sleep(2)                                        changeTemp = 1                                        tempPosPast = tempPos                                        errorActualPast = errorActual                                    if(manager[2]==2):                                        controlStopped = True                                        changeTemp=1                                        temperatureStep = 0                                        manager[1]=0                                        bathManager[0] = 0                                        bathManager[9] = 0                                if(manager[2]==1 or manager[2]==3 or manager[2]==4):                                    controlStopped = True                                    changeTemp=1                                    temperatureStep = 0                                    manager[1]=0                                    bathManager[0] = 0                                    bathManager[9] = 0                                    time.sleep(2)                                    bathManager[0] = 3                                    while(bathManager[0]!=0):                                        vari = 1 + 1                                currentTime = datetime.today()                                currentTimeStr = currentTime.strftime(FMT)                                timeDifference = datetime.strptime(currentTimeStr, FMT) - datetime.strptime(stepBeginTimeStr, FMT)                                currentDuration = timeDifference.seconds + timeDifference.microseconds*(0.000001)                            except UnicodeDecodeError:                                print("There has been an UNICODE ERROR at Sensor Data")                            except ValueError:                                print("There has been a VALUE ERROR at Sensor Data")                            except IOError:                                print("There has been an IO ERROR at Sensor Data")                    currentTime = datetime.today()                    currentTimeStr = currentTime.strftime(FMT)                    timeDifference = datetime.strptime(currentTimeStr, FMT) - datetime.strptime(stepBeginTimeStr, FMT)                    currentDuration = timeDifference.seconds + timeDifference.microseconds*(0.000001)                #CONTROL STEP FORWARDS                if(manager[2]==0 or manager[2]==4):                    temperatureStep = temperatureStep + 1                    manager[3] = temperatureStep                #CONTROL STEP BACKWARDS                if(manager[2]==3):                    temperatureStep = temperatureStep - 1                    if(temperatureStep<0):                        temperatureStep = 0                    manager[3] = temperatureStep                #CONTROL PAUSED                if(manager[2]==2 and not controlStopped):                    controlStopped = True                    temperatureStep = 0                    manager[1]=0                    bathManager[0] = 0                    bathManager[9] = 0                    isDataRequested = False                #CONTROL STOPPED or ENDED                if((temperatureObjective[temperatureStep]==0 and duration[temperatureStep]==0) or (manager[2]==1 and not controlStopped)):                    controlStopped = True                    temperatureStep = 0                    manager[1]=0                    bathManager[0] = 0                    bathManager[9] = 0                    time.sleep(2)                    bathManager[0] = 3                               isDataRequested = False                                    while(bathManager[0]!=0):                        vari = 1 + 1    except IOError:        manager[23] = 1        controlStopped = True        temperatureStep = 0        manager[1]=0        bathManager[0] = 0        bathManager[9] = 0        time.sleep(2)        bathManager[0] = 3                   isDataRequested = False                        while(bathManager[0]!=0):            vari = 1 + 1    bathManager[0] = -1    bathManager[9] = 0    ser.close()    time.sleep(2)    managementOfBath.join()